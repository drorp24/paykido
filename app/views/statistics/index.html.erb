<%= render 'primary_navigation' %>
<%= render 'consumer_navigation' %>
<%= render 'notifications' %>

<section id="maincontainer">

	<%= render 'page_head' %>

	<div class="box-content container_12">			
		<div class="box grid_12" > 	
			
			<div id="balance_info" class="hero-unit">
			    <% got = @consumer.got %>
			    <dl class="dl-horizontal">
				    <dt>Allowance</dt>
				    <dd><%= number_to_currency @allowance[:amount] %></dd>
				    <dt>Schedule</dt>
				    <dd>
				    	<span><%= @allowance[:weekly] ? @allowance[:weekly_occurrence] :@allowance[:monthly_occurrence] %>s</span>
						<span>(</span>
				    	<span><%= (@allowance[:next_occurrence].nil?) ?'Not scheduled yet' :(l @allowance[:next_occurrence], :format => :medium) %></span>				    		
						<span>)</span>
			    	</dd>
					<dt>Granted</dt>
					<dd><%= @allowance[:number_of_grants] %> times</dd>
				    <dt>Old allowance</dt>
				    <dd><%= number_to_currency @allowance[:prev_allowance_acc] %></dd>
				    <dt>Gifts & Awards</dt>
				    <dd><%= number_to_currency(got - @allowance[:so_far_accumulated] - @allowance[:prev_allowance_acc]) %></dd>
				    <dt>Got so far</dt>
				    <dd><%= number_to_currency got %></dd>
					<dt>Spent</dt>
					<dd><%= number_to_currency @consumer.spent %></dd>
					<dt>Balance</dt>
					<dd><%= number_to_currency @consumer.balance %></dd>				    
			    </dl>
			</div>
			<div id="balance_gauge"  class="hero-unit">
				<canvas id="cvs" height="250" width="250">[No canvas support]</canvas>			
			</div>
		</div>
	</div>

</section>
<script>
	window.onload = function ()
	{
		var gauge = new RGraph.Gauge('cvs', 0, <%= @max_value %>, <%= @needle_value %>);
		//gauge.Set('chart.shadow', false);
//		gauge.Draw();
		RGraph.Effects.Gauge.Grow(gauge);		
	}

</script>
